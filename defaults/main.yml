---

############################
#      Server options      #
############################

# Primary user to login to instances
# Use "root" for DigitalOcean and "ubuntu" for AWS Ubuntu instances
primary_user: root


# The user to deploy projects as
# Will create this user if it doesn't exist
deploy_user: deployer

# Create deploy user account if it doesn't exist
# Disable if you want to use an existing deploy user with SSH keys setup
create_deploy_user: True

# Directory where all the projects will reside
projects_dir: "/home/{{ deployer }}/projects"


# Each project's path
project_path: "{{ projects_dir }}/{{ app_name }}"


############################
#     Project options      #
############################

# The git branch or commit sha to deploy
git_ref: "master"


# Deploy type: "restart" or "upgrade" (hot-code reloading)
deploy_type: "restart"


# MIX_ENV to run project as
mix_env: "prod"

# List the domains to serve the app under
domains: []

# Length of secret key base to generate for the app
secret_key_base_length: 64


############################
#         Database         #
############################

# If postgres_install is "local", then will setup database on server
# If postgres_install is "remote", then will only install postgres client libs
# If postgres_install is False, then will not do anything about postgres
postgres_install: "local"


############################
#  Frontend & npm options  #
############################

# If set to False, frontend won't be built
# All options beyond this are not used
build_frontend: True
frontend_dir: ""
frontend_build_command: "$(npm bin)/brunch build --production"

# Command to run after building the frontend
post_frontend_build: "mix phoenix.digest"

# npm config options
npm_config_jobs: 1

# If true, this will install only production npm packages
# equivalent of running "npm install --production"
npm_config_install_production: False


#######################
#        Monit        #
#######################

# Should I send email alerts?
# If False, then all options beyond this will not be used
# If True, then the next section of vars need to be uncommented and set
enable_mail_alerts: False


# Uncomment & set the following vars if enable_mail_alerts is True
# smtp_host: smtp.mailgun.com
# smtp_user: foo@example.com
# smtp_password: F00barIsaPopularW0rd


# SMTP defaults
smtp_port: 587
smtp_use_tls: False


# Whom to mail if nginx goes down?
# app_alert_emails: ["foo@example.com", "bar@example.com"]
app_alert_emails: []


# Whom to mail if the app goes down?
# nginx_alert_emails: ["foo@example.com", "bar@example.com"]
nginx_alert_emails: []


############################################
#                Swap space                #
#  Some nodejs packages on small servers   #
#  require swap space in order to compile  #
############################################


# Won't create swap if not set to True
create_swap_file: True


# swap size in 1kb blocks
# we'll set the default at around 2gb
# 2048mb * 1024kb == 2097152
# which is approximately 2097 thousand ( == 2097k)
swap_size: 2097K


############################################
#               PRIVATE VARS               #
#         Don't set or change this         #
############################################

credentials_dir: "/etc/ansible-elixir-stack/credentials"
app_credentials_dir: "{{credentials_dir}}/{{app_name}}"

smtp_tls_option: ""
npm_install_options: ""

# Will be be set to true if non-root user
primary_user_sudo: false
