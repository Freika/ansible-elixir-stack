---
- name: add nginx pkg repo
  apt_repository: repo="ppa:nginx/stable"
  become: "{{primary_user_sudo}}"


- name: "install system packages"
  become: "{{primary_user_sudo}}"
  apt: name="{{ item }}" update_cache=yes state=present
  with_items:
    - gcc
    - g++
    - curl
    - wget
    - unzip
    - git
    - python-dev
    - python-apt
    - make
    - automake
    - autoconf
    - libreadline-dev
    - libncurses-dev
    - libssl-dev
    - libyaml-dev
    - libxslt-dev
    - libffi-dev
    - libtool
    - nginx
    - unixodbc-dev
    - monit


# Directory to store credentials
- name: should have credentials dir
  file: path="{{app_credentials_dir}}" state=directory recurse=True
  become: "{{primary_user_sudo}}"


- name: "check for swap file path"
  stat: path="/swap"
  register: swap_info
  become: "{{primary_user_sudo}}"


- when: create_swap_file == True and swap_info.stat.exists == False
  include: create-swap-file.yml


- name: "download pip installer script"
  get_url: url="https://bootstrap.pypa.io/get-pip.py" dest="/tmp/get-pip.py" mode=0777
  become: "{{primary_user_sudo}}"


- name: "install pip"
  command: "python /tmp/get-pip.py"
  become: "{{primary_user_sudo}}"


- when: create_deploy_user == True
  include: deploy-user.yml


- name: "ensure projects directory"
  file: path="~/projects" state=directory owner="{{ deploy_user }}"
  become_user: "{{deploy_user}}"
  become: "{{primary_user_sudo}}"


- name: "install asdf"
  git: repo="https://github.com/asdf-vm/asdf.git" dest="~/.asdf" update=yes
  become_user: "{{deploy_user}}"
  become: "{{primary_user_sudo}}"


- name: "source asdf in bashrc"
  lineinfile: dest="~/.bash_profile" create=yes line="source ~/.asdf/asdf.sh"
  become_user: "{{deploy_user}}"
  become: "{{primary_user_sudo}}"


- name: "add asdf plugins"
  command: "bash -lc 'asdf plugin-add {{item}} https://github.com/HashNuke/asdf-{{item}}.git'"
  with_items:
    - nodejs
    - erlang
    - elixir
  become_user: "{{deploy_user}}"
  become: "{{primary_user_sudo}}"


- when: postgres_install == "local"
  include: postgres-facts.yml


- when: postgres_install != False
  include: postgres.yml


- include: project.yml


- when: build_frontend == True
  include: frontend.yml


- name: "disable nginx and don't start service on reboot"
  service: name=nginx enabled=no state=stopped
  become: "{{primary_user_sudo}}"


- name: remove nginx default configs
  file: name="{{ item }}" state=absent
  with_items:
    - /etc/nginx/sites-available/default
    - /etc/nginx/sites-enabled/default
  become: "{{primary_user_sudo}}"


- name: add nginx config for elixir app
  template:
    src: app.nginx.j2
    dest: "/etc/nginx/sites-available/{{ app_name }}.nginx"
  become: "{{primary_user_sudo}}"


- name: enable elixir app to be served by nginx
  file:
    src: "/etc/nginx/sites-available/{{ app_name }}.nginx"
    dest: "/etc/nginx/sites-enabled/{{ app_name }}.nginx"
    state: link
  become: "{{primary_user_sudo}}"


# monit
- name: allow localhost access in monit config
  template:
    src: monit-http-access.monit.j2
    dest: "/etc/monit/conf.d/monit-http-config.monit"
  become: "{{primary_user_sudo}}"


- when: enable_mail_alerts == True and smtp_use_tls == True
  name: set tls_option
  set_fact: smtp_tls_option="using tlsv1"
  become: "{{primary_user_sudo}}"


- when: enable_mail_alerts == True and smtp_use_tls != True
  name: set tls_option
  set_fact: smtp_tls_option=""
  become: "{{primary_user_sudo}}"


- when: enable_mail_alerts == True
  name: set mail server for notifications in monit
  template:
    src: monit-mail-config.monit.j2
    dest: "/etc/monit/conf.d/monit-mail-config.monit"
  become: "{{primary_user_sudo}}"


- name: add monit config for nginx
  template:
    src: nginx.monit.j2
    dest: "/etc/monit/conf.d/nginx.monit"
  become: "{{primary_user_sudo}}"


- name: start monit & mark to be started on system reboots
  service: name=monit state=started enabled=yes
  become: "{{primary_user_sudo}}"


- name: add monit config for elixir app
  template:
    src: app.monit.j2
    dest: "/etc/monit/conf.d/{{ app_name }}.monit"
  become: "{{primary_user_sudo}}"


#TODO infer deploy type from srv dir's existence
- when: deploy_type == "restart"
  include: action-deploy-restart.yml


- when: deploy_type == "upgrade"
  include: action-deploy-upgrade.yml


- name: "reload monit"
  command: "monit reload"
  become: "{{primary_user_sudo}}"


- name: start nginx
  monit: name="nginx" state=started
  become: "{{primary_user_sudo}}"


- name: reload nginx config
  command: "nginx -s reload"
  become: "{{primary_user_sudo}}"
